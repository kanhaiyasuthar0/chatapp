{"ast":null,"code":"var _jsxFileName = \"/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect('http://localhost:3001');\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  const [recipientPublicKey, setRecipientPublicKey] = useState('');\n  useEffect(() => {\n    socket.on('chat message', encryptedMsg => {\n      console.log(\"ðŸš€ ~ socket.on ~ encryptedMsg:\", encryptedMsg);\n      try {\n        const decryptedMsg = decryptMessage(encryptedMsg);\n        console.log(\"ðŸš€ ~ socket.on ~ decryptedMsg:\", decryptedMsg);\n        setChat([...chat, decryptedMsg]);\n      } catch (error) {\n        console.error(\"Decryption error\", error);\n      }\n    });\n  }, [chat]);\n  const sendMessage = async e => {\n    e.preventDefault();\n\n    // Fetch recipient's public key from the server\n    // Assuming you have a function to get the recipient's username or ID\n    const recipientUsername = '65a42345de580c62df9cdf31'; // Replace with actual recipient's username\n    const response = await axios.get(`http://localhost:3001/api/users/${recipientUsername}/public-key`);\n    setRecipientPublicKey(naclUtil.decodeBase64(response.data.publicKey));\n    console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length);\n\n    // Encrypt the message\n    const encryptedMsg = encryptMessage(response.data.publicKey, message);\n    if (encryptedMsg) {\n      socket.emit('chat message', encryptedMsg);\n    }\n    setMessage('');\n  };\n\n  // Encrypt function\n  const encryptMessage = (publicKeyBase64, message) => {\n    const publicKey = naclUtil.decodeBase64(publicKeyBase64);\n    console.log(\"ðŸš€ ~ encryptMessage ~ publicKey:\", publicKey.length);\n    if (publicKey.length !== 32) {\n      console.error(\"Public key has an incorrect size:\", publicKey.length);\n      return null;\n    }\n    const nonce = nacl.randomBytes(nacl.box.nonceLength);\n    const encryptedMessage = nacl.box(naclUtil.decodeUTF8(message), nonce, publicKey, naclUtil.decodeBase64(localStorage.getItem('privateKey')));\n    return {\n      nonce: naclUtil.encodeBase64(nonce),\n      encryptedMessage: naclUtil.encodeBase64(encryptedMessage)\n    };\n  };\n\n  // Decrypt function\n  const decryptMessage = encryptedMsg => {\n    const {\n      nonce,\n      encryptedMessage\n    } = encryptedMsg;\n    const decryptedMessage = nacl.box.open(naclUtil.decodeBase64(encryptedMessage), naclUtil.decodeBase64(nonce), naclUtil.decodeBase64(recipientPublicKey), naclUtil.decodeBase64(localStorage.getItem('privateKey')));\n    return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: chat.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Message\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"/lLxUt9W6SdjuwUT7mUp/9W2C40=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","io","nacl","naclUtil","axios","jsxDEV","_jsxDEV","socket","connect","Chat","_s","message","setMessage","chat","setChat","recipientPublicKey","setRecipientPublicKey","on","encryptedMsg","console","log","decryptedMsg","decryptMessage","error","sendMessage","e","preventDefault","recipientUsername","response","get","decodeBase64","data","publicKey","length","encryptMessage","emit","publicKeyBase64","nonce","randomBytes","box","nonceLength","encryptedMessage","decodeUTF8","localStorage","getItem","encodeBase64","decryptedMessage","open","encodeUTF8","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport axios from 'axios';\n\nconst socket = io.connect('http://localhost:3001');\n\nfunction Chat() {\n    const [message, setMessage] = useState('');\n    const [chat, setChat] = useState([]);\n    const [recipientPublicKey, setRecipientPublicKey] = useState('');\n\n    useEffect(() => {\n        socket.on('chat message', (encryptedMsg) => {\n            console.log(\"ðŸš€ ~ socket.on ~ encryptedMsg:\", encryptedMsg)\n            try {\n                const decryptedMsg = decryptMessage(encryptedMsg);\n                console.log(\"ðŸš€ ~ socket.on ~ decryptedMsg:\", decryptedMsg)\n                setChat([...chat, decryptedMsg]);\n            } catch (error) {\n                console.error(\"Decryption error\", error);\n            }\n        });\n    }, [chat]);\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        // Fetch recipient's public key from the server\n        // Assuming you have a function to get the recipient's username or ID\n        const recipientUsername = '65a42345de580c62df9cdf31'; // Replace with actual recipient's username\n        const response = await axios.get(`http://localhost:3001/api/users/${recipientUsername}/public-key`);\n        setRecipientPublicKey(naclUtil.decodeBase64(response.data.publicKey));\n        console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length)\n\n        // Encrypt the message\n        const encryptedMsg = encryptMessage(response.data.publicKey, message);\n\n        if (encryptedMsg) {\n            socket.emit('chat message', encryptedMsg);\n        }\n        setMessage('');\n    };\n\n    // Encrypt function\n    const encryptMessage = (publicKeyBase64, message) => {\n        const publicKey = naclUtil.decodeBase64(publicKeyBase64);\n        console.log(\"ðŸš€ ~ encryptMessage ~ publicKey:\", publicKey.length)\n\n        if (publicKey.length !== 32) {\n            console.error(\"Public key has an incorrect size:\", publicKey.length);\n            return null;\n        }\n    \n        const nonce = nacl.randomBytes(nacl.box.nonceLength);\n        const encryptedMessage = nacl.box(\n            naclUtil.decodeUTF8(message),\n            nonce,\n            publicKey,\n            naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n        );\n    \n        return { nonce: naclUtil.encodeBase64(nonce), encryptedMessage: naclUtil.encodeBase64(encryptedMessage) };\n    };\n\n    // Decrypt function\n    const decryptMessage = (encryptedMsg) => {\n        const { nonce, encryptedMessage } = encryptedMsg;\n        const decryptedMessage = nacl.box.open(\n            naclUtil.decodeBase64(encryptedMessage),\n            naclUtil.decodeBase64(nonce),\n            naclUtil.decodeBase64(recipientPublicKey),\n            naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n        );\n        return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n    };\n\n    return (\n        <div>\n            <h2>Chat</h2>\n            <div className=\"chat-box\">\n                {chat.map((msg, index) => (\n                    <p key={index}>{msg}</p>\n                ))}\n            </div>\n            <form onSubmit={sendMessage}>\n                <input type=\"text\" placeholder=\"Message\" value={message} onChange={(e) => setMessage(e.target.value)} />\n                <button type=\"submit\">Send</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}