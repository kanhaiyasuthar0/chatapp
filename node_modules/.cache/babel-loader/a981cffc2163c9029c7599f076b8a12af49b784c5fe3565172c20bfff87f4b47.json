{"ast":null,"code":"var _jsxFileName = \"/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useId } from 'react';\nimport io from 'socket.io-client';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport axios from 'axios';\nimport ListOfFriends from './Chat/ListOfFriends';\nimport ChatWindow from './Chat/ChatWindow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect('http://localhost:3001');\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  const [recipientPublicKey, setRecipientPublicKey] = useState('');\n  const [openedWindowForFriend, setOpenedWindowForFriend] = useState(null);\n  console.log(\"ðŸš€ ~ Chat ~ openedWindowForFriend:\", openedWindowForFriend);\n  const [refetch, setRefetch] = useState(false);\n  const [room, setRoom] = useState(false);\n  console.log(\"ðŸš€ ~ Chat ~ recipientPublicKey:\", recipientPublicKey);\n  const userId = localStorage.getItem(\"userId\");\n  const [publicKey, setPublicKey] = useState(\"\");\n  const [myPublicKey, setMyPublicKey] = useState(\"\");\n  async function getPublicKey(friendId) {\n    const resp = await axios.get(`http://localhost:3001/api/users/${friendId}/public-key`);\n    const myresp = await axios.get(`http://localhost:3001/api/users/${userId}/public-key`);\n    setPublicKey(resp.data.publicKey);\n    setMyPublicKey(myresp.data.publicKey);\n  }\n  function openingNewWIndow(friendId) {\n    getPublicKey(friendId);\n    setOpenedWindowForFriend(friendId);\n    const roomId = createRoomId(userId, friendId);\n    setRoom(roomId);\n  }\n  const createRoomId = (userId, friendId) => {\n    const ids = [userId, friendId].sort();\n    return `room_${ids[0]}_${ids[1]}`;\n  };\n  useEffect(() => {\n    room && socket.emit('join chat', room);\n    socket.on('chat message', encryptedMsg => {\n      console.log(\"ðŸš€ ~ socket.on ~ encryptedMsg:\", encryptedMsg, publicKey);\n      try {\n        // const decryptedMsg = decryptMessage(encryptedMsg);\n        // console.log(\"ðŸš€ ~ socket.on ~ decryptedMsg:\", decryptedMsg)\n        setChat([...chat, encryptedMsg]);\n      } catch (error) {\n        console.error(\"Decryption error\", error);\n      }\n    });\n  }, [chat]);\n  const sendMessage = async e => {\n    e.preventDefault();\n\n    // Fetch recipient's public key from the server\n    // Assuming you have a function to get the recipient's username or ID\n    const recipientUsername = openedWindowForFriend; // Replace with actual recipient's username\n    const response = await axios.get(`http://localhost:3001/api/users/${recipientUsername}/public-key`);\n    setRecipientPublicKey(response.data.publicKey);\n    console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length);\n\n    // Encrypt the message\n    const encryptedMsg = encryptMessage(response.data.publicKey, message);\n    const newMessage = {\n      sender: userId,\n      receiver: recipientUsername,\n      message: encryptedMsg\n    };\n    // socket.emit('chat message', newMessage);\n    socket.emit('chat message', {\n      chatRoom: room,\n      encryptedMessage: newMessage\n    });\n    setRefetch(!refetch);\n    setMessage('');\n  };\n\n  // Encrypt function\n  const encryptMessage = (publicKey, message) => {\n    const nonce = nacl.randomBytes(nacl.box.nonceLength);\n    const encryptedMessage = nacl.box(naclUtil.decodeUTF8(message), nonce, naclUtil.decodeBase64(publicKey), naclUtil.decodeBase64(localStorage.getItem('privateKey')));\n    return {\n      nonce: naclUtil.encodeBase64(nonce),\n      encryptedMessage: naclUtil.encodeBase64(encryptedMessage)\n    };\n  };\n\n  // Decrypt function\n  // const decryptMessage = (encryptedMsg) => {\n  //     const { nonce, encryptedMessage } = encryptedMsg;\n  //     const decryptedMessage = nacl.box.open(\n  //         naclUtil.decodeBase64(encryptedMessage),\n  //         naclUtil.decodeBase64(nonce),\n  //         naclUtil.decodeBase64(recipientPublicKey),\n  //         naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n  //     );\n  //     return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n  // };\n\n  const decryptMessage = (encryptedMsg, pubkey) => {\n    console.log(\"ðŸš€ ~ decryptMessage ~ pubkey:\", pubkey, encryptedMsg);\n    // console.log(\"ðŸš€ ~ decryptMessage ~ encryptedMsg:\", encryptedMsg)\n    const {\n      nonce,\n      encryptedMessage\n    } = encryptedMsg;\n    let decodedPublicKey;\n    try {\n      decodedPublicKey = naclUtil.decodeBase64(pubkey);\n      console.log(\"ðŸš€ ~ decryptMessage ~ recipientPublicKey:\", pubkey);\n      if (decodedPublicKey.length !== 32) {\n        throw new Error('Invalid public key length');\n      }\n    } catch (error) {\n      return `Error in public key: ${error.message}`;\n    }\n    try {\n      const decryptedMessage = nacl.box.open(naclUtil.decodeBase64(encryptedMessage), naclUtil.decodeBase64(nonce), decodedPublicKey, naclUtil.decodeBase64(localStorage.getItem('privateKey')));\n      return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n    } catch (error) {\n      return `Decryption failed: ${error.message}`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        gap: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListOfFriends, {\n        openingNewWIndow: openingNewWIndow,\n        setOpenedWindowForFriend: setOpenedWindowForFriend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this), openedWindowForFriend && userId && /*#__PURE__*/_jsxDEV(ChatWindow, {\n        myPublicKey: myPublicKey,\n        publicKey: publicKey,\n        decryptMessage: decryptMessage,\n        chat: chat,\n        setChat: setChat,\n        sendMessage: sendMessage,\n        message: message,\n        setMessage: setMessage,\n        friendId: openedWindowForFriend,\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 59\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"MxaGkh0f/eB1BTPDzgZFpnO7QS4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useId","io","nacl","naclUtil","axios","ListOfFriends","ChatWindow","jsxDEV","_jsxDEV","socket","connect","Chat","_s","message","setMessage","chat","setChat","recipientPublicKey","setRecipientPublicKey","openedWindowForFriend","setOpenedWindowForFriend","console","log","refetch","setRefetch","room","setRoom","userId","localStorage","getItem","publicKey","setPublicKey","myPublicKey","setMyPublicKey","getPublicKey","friendId","resp","get","myresp","data","openingNewWIndow","roomId","createRoomId","ids","sort","emit","on","encryptedMsg","error","sendMessage","e","preventDefault","recipientUsername","response","length","encryptMessage","newMessage","sender","receiver","chatRoom","encryptedMessage","nonce","randomBytes","box","nonceLength","decodeUTF8","decodeBase64","encodeBase64","decryptMessage","pubkey","decodedPublicKey","Error","decryptedMessage","open","encodeUTF8","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","justifyContent","gap","_c","$RefreshReg$"],"sources":["/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useId } from 'react';\nimport io from 'socket.io-client';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport axios from 'axios';\nimport ListOfFriends from './Chat/ListOfFriends';\nimport ChatWindow from './Chat/ChatWindow';\n\nconst socket = io.connect('http://localhost:3001');\n\nfunction Chat() {\n    const [message, setMessage] = useState('');\n    const [chat, setChat] = useState([]);\n    const [recipientPublicKey, setRecipientPublicKey] = useState('');\n    const [openedWindowForFriend, setOpenedWindowForFriend] = useState(null);\n    console.log(\"ðŸš€ ~ Chat ~ openedWindowForFriend:\", openedWindowForFriend)\n    const [refetch, setRefetch] = useState(false)\n    const [room, setRoom] = useState(false)\n    console.log(\"ðŸš€ ~ Chat ~ recipientPublicKey:\", recipientPublicKey)\n    const userId = localStorage.getItem(\"userId\") ;\n    const [publicKey, setPublicKey] = useState(\"\")\n    const [myPublicKey, setMyPublicKey] = useState(\"\")\n\nasync function getPublicKey (friendId){\n    const resp = await axios.get(`http://localhost:3001/api/users/${friendId}/public-key`);\n    const myresp = await axios.get(`http://localhost:3001/api/users/${userId}/public-key`);\n    setPublicKey(resp.data.publicKey)\n    setMyPublicKey(myresp.data.publicKey)\n}\n\n    function openingNewWIndow(friendId ){\n        getPublicKey(friendId)\n        setOpenedWindowForFriend(friendId) \n        const roomId = createRoomId(userId, friendId);\n        setRoom(roomId)\n    }\n\n\n    const createRoomId = (userId, friendId) => {\n        const ids = [userId, friendId].sort();\n        return `room_${ids[0]}_${ids[1]}`;\n    };\n\n    useEffect(() => {\n        room && socket.emit('join chat', room);\n         socket.on('chat message', (encryptedMsg) => {\n            console.log(\"ðŸš€ ~ socket.on ~ encryptedMsg:\", encryptedMsg,  publicKey)\n            try {\n                // const decryptedMsg = decryptMessage(encryptedMsg);\n                // console.log(\"ðŸš€ ~ socket.on ~ decryptedMsg:\", decryptedMsg)\n                setChat([...chat, encryptedMsg]);\n            } catch (error) {\n                console.error(\"Decryption error\", error);\n            }\n        });\n    }, [chat]);\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        // Fetch recipient's public key from the server\n        // Assuming you have a function to get the recipient's username or ID\n        const recipientUsername = openedWindowForFriend; // Replace with actual recipient's username\n        const response = await axios.get(`http://localhost:3001/api/users/${recipientUsername}/public-key`);\n        setRecipientPublicKey(response.data.publicKey);\n        console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length)\n\n        // Encrypt the message\n        const encryptedMsg = encryptMessage(response.data.publicKey, message);\n        const newMessage = {\n            sender: userId,\n            receiver: recipientUsername,\n            message: encryptedMsg\n          };\n        // socket.emit('chat message', newMessage);\n        socket.emit('chat message', { chatRoom : room, encryptedMessage: newMessage });\n        setRefetch(!refetch)\n        setMessage('');\n    };\n\n    // Encrypt function\n    const encryptMessage = (publicKey, message) => {\n        const nonce = nacl.randomBytes(nacl.box.nonceLength);\n        const encryptedMessage = nacl.box(\n            naclUtil.decodeUTF8(message),\n            nonce,\n            naclUtil.decodeBase64(publicKey),\n            naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n        );\n        return { nonce: naclUtil.encodeBase64(nonce), encryptedMessage: naclUtil.encodeBase64(encryptedMessage) };\n    };\n\n    // Decrypt function\n    // const decryptMessage = (encryptedMsg) => {\n    //     const { nonce, encryptedMessage } = encryptedMsg;\n    //     const decryptedMessage = nacl.box.open(\n    //         naclUtil.decodeBase64(encryptedMessage),\n    //         naclUtil.decodeBase64(nonce),\n    //         naclUtil.decodeBase64(recipientPublicKey),\n    //         naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n    //     );\n    //     return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n    // };\n\n    const decryptMessage = (encryptedMsg, pubkey) => {\n        console.log(\"ðŸš€ ~ decryptMessage ~ pubkey:\", pubkey, encryptedMsg)\n        // console.log(\"ðŸš€ ~ decryptMessage ~ encryptedMsg:\", encryptedMsg)\n        const { nonce, encryptedMessage } = encryptedMsg;\n        let decodedPublicKey;\n        try {\n            decodedPublicKey = naclUtil.decodeBase64(pubkey);\n            console.log(\"ðŸš€ ~ decryptMessage ~ recipientPublicKey:\", pubkey)\n            if (decodedPublicKey.length !== 32) {\n                throw new Error('Invalid public key length');\n            }\n        } catch (error) {\n            return `Error in public key: ${error.message}`;\n        }\n    \n        try {\n            const decryptedMessage = nacl.box.open(\n                naclUtil.decodeBase64(encryptedMessage),\n                naclUtil.decodeBase64(nonce),\n                decodedPublicKey,\n                naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n            );\n            return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n        } catch (error) {\n            return `Decryption failed: ${error.message}`;\n        }\n    };\n    \n\n    return (\n        <div>\n            <h2>Chat</h2>\n            <div className=\"chat-box\" style={{display : \"flex\", justifyContent : \"center\", gap:\"300px\"}}>\n                    <ListOfFriends openingNewWIndow={openingNewWIndow} setOpenedWindowForFriend={setOpenedWindowForFriend}/>\n                   { openedWindowForFriend && userId &&   <ChatWindow myPublicKey={myPublicKey} publicKey={publicKey} decryptMessage={decryptMessage} chat={chat} setChat={setChat} sendMessage={sendMessage} message ={message} setMessage={ setMessage} friendId={openedWindowForFriend} userId={userId} />}\n\n\n\n\n               \n            </div>\n            \n\n\n\n        </div>\n    );\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}