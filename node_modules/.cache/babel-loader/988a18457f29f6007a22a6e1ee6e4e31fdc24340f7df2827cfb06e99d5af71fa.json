{"ast":null,"code":"var _jsxFileName = \"/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useId } from \"react\";\nimport io from \"socket.io-client\";\nimport nacl from \"tweetnacl\";\nimport naclUtil from \"tweetnacl-util\";\nimport axios from \"axios\";\nimport ListOfFriends from \"./Chat/ListOfFriends\";\nimport ChatWindow from \"./Chat/ChatWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([]);\n  const [recipientPublicKey, setRecipientPublicKey] = useState(\"\");\n  const [openedWindowForFriend, setOpenedWindowForFriend] = useState(null);\n  console.log(\"ðŸš€ ~ Chat ~ openedWindowForFriend:\", openedWindowForFriend);\n  const [refetch, setRefetch] = useState(false);\n  const [room, setRoom] = useState(false);\n  console.log(\"ðŸš€ ~ Chat ~ recipientPublicKey:\", recipientPublicKey);\n  const userId = localStorage.getItem(\"userId\");\n  const [publicKey, setPublicKey] = useState(\"\");\n  const [myPublicKey, setMyPublicKey] = useState(\"\");\n  const [senderId, setSenderId] = useState(\"\");\n  async function getPublicKey(friendId) {\n    const resp = await axios.get(`http://localhost:3001/api/users/${friendId}/public-key`);\n    const myresp = await axios.get(`http://localhost:3001/api/users/${userId}/public-key`);\n    setPublicKey(resp.data.publicKey);\n    setMyPublicKey(myresp.data.publicKey);\n  }\n  function openingNewWIndow(friendId) {\n    getPublicKey(friendId).then(() => {\n      console.log(\"calling fetcher\");\n      setRefetch(!refetch);\n      setOpenedWindowForFriend(friendId);\n      const roomId = createRoomId(userId, friendId);\n      console.log(\"ðŸš€ ~ openingNewWIndow ~ roomId:\", roomId);\n      setRoom(roomId);\n    });\n  }\n  const createRoomId = (userId, friendId) => {\n    const ids = [userId, friendId].sort();\n    return `room_${ids[0]}_${ids[1]}`;\n  };\n  const fetchChat = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3001/api/chat/${userId}/${openedWindowForFriend}`);\n      let arr = response.data.map(item => ({\n        message: item.message,\n        sender: item.sender,\n        image: item === null || item === void 0 ? void 0 : item.image\n      }));\n      console.log(\"ðŸš€ ~ fetchChat ~ arr:\", arr);\n      setChat(arr);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n    }\n  };\n  useEffect(() => {\n    room && socket.emit(\"join chat\", room);\n    socket.on(\"chat message\", encryptedMsg => {\n      console.log(\"ðŸš€ ~ socket.on ~ encryptedMsg:\", encryptedMsg, publicKey);\n      try {\n        fetchChat();\n        // const decryptedMsg = decryptMessage(encryptedMsg);\n        // console.log(\"ðŸš€ ~ socket.on ~ decryptedMsg:\", decryptedMsg)\n        // setChat([...chat, {message : encryptedMsg, sender : senderId ?? openedWindowForFriend }]);\n        // setRefetch(!refetch)\n      } catch (error) {\n        console.error(\"Decryption error\", error);\n      }\n    });\n    console.log(\"111\");\n  }, []);\n  useEffect(() => {\n    console.log(\"222\");\n    if (userId && openedWindowForFriend) {\n      fetchChat();\n    }\n  }, [openedWindowForFriend]);\n  const sendMessage = async e => {\n    e.preventDefault();\n\n    // Fetch recipient's public key from the server\n    // Assuming you have a function to get the recipient's username or ID\n    const recipientUsername = openedWindowForFriend; // Replace with actual recipient's username\n    const response = await axios.get(`http://localhost:3001/api/users/${recipientUsername}/public-key`);\n    setRecipientPublicKey(response.data.publicKey);\n    console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length);\n\n    // Encrypt the message\n    const encryptedMsg = encryptMessage(response.data.publicKey, message);\n    setSenderId(userId);\n    const newMessage = {\n      sender: userId,\n      receiver: recipientUsername,\n      message: encryptedMsg,\n      image: \"\"\n    };\n    // socket.emit('chat message', newMessage);\n    socket.emit(\"chat message\", {\n      chatRoom: room,\n      encryptedMessage: newMessage\n    });\n    setRefetch(!refetch);\n    setMessage(\"\");\n  };\n\n  // Encrypt function\n  const encryptMessage = (publicKey, message) => {\n    // console.log(\"ðŸš€ ~ encryptMessage ~ publicKey:\", publicKey)\n    var encoded;\n    try {\n      encoded = naclUtil.decodeBase64(publicKey);\n      // console.log(\"ðŸš€ ~ decryptMessage ~ decodedPublicKey:\", encoded)\n      // console.log(\"ðŸš€ ~ decryptMessage ~ recipientPublicKey:\", publicKey)\n      if (encoded.length !== 32) {\n        throw new Error(\"Invalid public key length\");\n      }\n    } catch (error) {\n      return `Error in public key: ${error.message}`;\n    }\n    const nonce = nacl.randomBytes(nacl.box.nonceLength);\n    const privateKey = naclUtil.decodeBase64(localStorage.getItem(\"privateKey\"));\n    // console.log(\"ðŸš€ ~ encryptMessage ~ privateKey:\", privateKey.length)\n    const encryptedMessage = nacl.box(naclUtil.decodeUTF8(message), nonce, encoded, privateKey);\n    return {\n      nonce: naclUtil.encodeBase64(nonce),\n      encryptedMessage: naclUtil.encodeBase64(encryptedMessage)\n    };\n  };\n\n  // Decrypt function\n  // const decryptMessage = (encryptedMsg) => {\n  //     const { nonce, encryptedMessage } = encryptedMsg;\n  //     const decryptedMessage = nacl.box.open(\n  //         naclUtil.decodeBase64(encryptedMessage),\n  //         naclUtil.decodeBase64(nonce),\n  //         naclUtil.decodeBase64(recipientPublicKey),\n  //         naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n  //     );\n  //     return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n  // };\n\n  const decryptMessage = (encryptedMsg, pubkey) => {\n    // console.log(\"ðŸš€ ~ decryptMessage ~ encryptedMsg:\", encryptedMsg)\n    if (!encryptedMsg || !(encryptedMsg !== null && encryptedMsg !== void 0 && encryptedMsg.nonce) || !(encryptedMsg !== null && encryptedMsg !== void 0 && encryptedMsg.encryptedMessage)) {\n      return;\n    }\n    const {\n      nonce,\n      encryptedMessage\n    } = encryptedMsg;\n    // console.log(\"ðŸš€ ~ decryptMessage ~ pubkey:\", pubkey, nonce, encryptedMessage, localStorage.getItem('privateKey'))\n    let decodedPublicKey;\n    try {\n      decodedPublicKey = naclUtil.decodeBase64(pubkey);\n      // console.log(\"ðŸš€ ~ decryptMessage ~ decodedPublicKey:\", decodedPublicKey)\n      // console.log(\"ðŸš€ ~ decryptMessage ~ recipientPublicKey:\", pubkey)\n      if (decodedPublicKey.length !== 32) {\n        throw new Error(\"Invalid public key length\");\n      }\n    } catch (error) {\n      return `Error in public key: ${error.message}`;\n    }\n    try {\n      const privateKey = naclUtil.decodeBase64(localStorage.getItem(\"privateKey\"));\n      const decryptedMessage = nacl.box.open(naclUtil.decodeBase64(encryptedMessage), naclUtil.decodeBase64(nonce), naclUtil.decodeBase64(pubkey), privateKey);\n      // console.log(\"ðŸš€ ~ decryptMessage ~ decryptedMessage:\", decryptedMessage)\n      return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : \"Failed to decrypt message\";\n    } catch (error) {\n      return `Decryption failed: ${error.message}`;\n    }\n  };\n  console.log(\"CHAT\", chat);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"10px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"left\",\n        gap: \"10px\",\n        padding: \"0px 10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListOfFriends, {\n        openingNewWIndow: openingNewWIndow,\n        setOpenedWindowForFriend: setOpenedWindowForFriend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), openedWindowForFriend && userId && /*#__PURE__*/_jsxDEV(ChatWindow, {\n        room: room,\n        socket: socket,\n        myPublicKey: myPublicKey,\n        publicKey: publicKey,\n        decryptMessage: decryptMessage,\n        chat: chat,\n        setChat: setChat,\n        sendMessage: sendMessage,\n        message: message,\n        setMessage: setMessage,\n        friendId: openedWindowForFriend,\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"/ZTa11PgijkpYyTPNMIlh1XtnEc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useId","io","nacl","naclUtil","axios","ListOfFriends","ChatWindow","jsxDEV","_jsxDEV","socket","connect","Chat","_s","message","setMessage","chat","setChat","recipientPublicKey","setRecipientPublicKey","openedWindowForFriend","setOpenedWindowForFriend","console","log","refetch","setRefetch","room","setRoom","userId","localStorage","getItem","publicKey","setPublicKey","myPublicKey","setMyPublicKey","senderId","setSenderId","getPublicKey","friendId","resp","get","myresp","data","openingNewWIndow","then","roomId","createRoomId","ids","sort","fetchChat","response","arr","map","item","sender","image","error","emit","on","encryptedMsg","sendMessage","e","preventDefault","recipientUsername","length","encryptMessage","newMessage","receiver","chatRoom","encryptedMessage","encoded","decodeBase64","Error","nonce","randomBytes","box","nonceLength","privateKey","decodeUTF8","encodeBase64","decryptMessage","pubkey","decodedPublicKey","decryptedMessage","open","encodeUTF8","style","padding","children","className","display","justifyContent","gap","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useId } from \"react\";\nimport io from \"socket.io-client\";\nimport nacl from \"tweetnacl\";\nimport naclUtil from \"tweetnacl-util\";\nimport axios from \"axios\";\nimport ListOfFriends from \"./Chat/ListOfFriends\";\nimport ChatWindow from \"./Chat/ChatWindow\";\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nfunction Chat() {\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([]);\n  const [recipientPublicKey, setRecipientPublicKey] = useState(\"\");\n  const [openedWindowForFriend, setOpenedWindowForFriend] = useState(null);\n  console.log(\"ðŸš€ ~ Chat ~ openedWindowForFriend:\", openedWindowForFriend);\n  const [refetch, setRefetch] = useState(false);\n  const [room, setRoom] = useState(false);\n  console.log(\"ðŸš€ ~ Chat ~ recipientPublicKey:\", recipientPublicKey);\n  const userId = localStorage.getItem(\"userId\");\n  const [publicKey, setPublicKey] = useState(\"\");\n  const [myPublicKey, setMyPublicKey] = useState(\"\");\n  const [senderId, setSenderId] = useState(\"\");\n  async function getPublicKey(friendId) {\n    const resp = await axios.get(\n      `http://localhost:3001/api/users/${friendId}/public-key`\n    );\n    const myresp = await axios.get(\n      `http://localhost:3001/api/users/${userId}/public-key`\n    );\n    setPublicKey(resp.data.publicKey);\n    setMyPublicKey(myresp.data.publicKey);\n  }\n\n  function openingNewWIndow(friendId) {\n      getPublicKey(friendId).then(() => {\n        console.log(\"calling fetcher\")\n        setRefetch(!refetch)\n          setOpenedWindowForFriend(friendId);\n      const roomId = createRoomId(userId, friendId);\n      console.log(\"ðŸš€ ~ openingNewWIndow ~ roomId:\", roomId);\n      setRoom(roomId);\n    });\n  }\n\n  const createRoomId = (userId, friendId) => {\n    const ids = [userId, friendId].sort();\n    return `room_${ids[0]}_${ids[1]}`;\n  };\n\n  const fetchChat = async () => {\n    try {\n      const response = await axios.get(\n        `http://localhost:3001/api/chat/${userId}/${openedWindowForFriend}`\n      );\n      let arr = response.data.map((item) => ({\n        message: item.message,\n        sender: item.sender,\n        image: item?.image,\n      }));\n      console.log(\"ðŸš€ ~ fetchChat ~ arr:\", arr);\n      setChat(arr);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n    }\n  };\n\n  useEffect(() => {\n    room && socket.emit(\"join chat\", room);\n    socket.on(\"chat message\", (encryptedMsg) => {\n      console.log(\"ðŸš€ ~ socket.on ~ encryptedMsg:\", encryptedMsg, publicKey);\n      try {\n\n        fetchChat();\n        // const decryptedMsg = decryptMessage(encryptedMsg);\n        // console.log(\"ðŸš€ ~ socket.on ~ decryptedMsg:\", decryptedMsg)\n        // setChat([...chat, {message : encryptedMsg, sender : senderId ?? openedWindowForFriend }]);\n        // setRefetch(!refetch)\n      } catch (error) {\n        console.error(\"Decryption error\", error);\n      }\n    });\n    console.log(\"111\")\n  }, []);\n\n  useEffect(() =>{\n    console.log(\"222\")\n    if(userId && openedWindowForFriend ) {\n        fetchChat();\n    }\n  }, [openedWindowForFriend])\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    // Fetch recipient's public key from the server\n    // Assuming you have a function to get the recipient's username or ID\n    const recipientUsername = openedWindowForFriend; // Replace with actual recipient's username\n    const response = await axios.get(\n      `http://localhost:3001/api/users/${recipientUsername}/public-key`\n    );\n    setRecipientPublicKey(response.data.publicKey);\n    console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length);\n\n    // Encrypt the message\n    const encryptedMsg = encryptMessage(response.data.publicKey, message);\n    setSenderId(userId);\n    const newMessage = {\n      sender: userId,\n      receiver: recipientUsername,\n      message: encryptedMsg,\n      image: \"\",\n    };\n    // socket.emit('chat message', newMessage);\n    socket.emit(\"chat message\", {\n      chatRoom: room,\n      encryptedMessage: newMessage,\n    });\n    setRefetch(!refetch);\n    setMessage(\"\");\n  };\n\n  // Encrypt function\n  const encryptMessage = (publicKey, message) => {\n    // console.log(\"ðŸš€ ~ encryptMessage ~ publicKey:\", publicKey)\n    var encoded;\n    try {\n      encoded = naclUtil.decodeBase64(publicKey);\n      // console.log(\"ðŸš€ ~ decryptMessage ~ decodedPublicKey:\", encoded)\n      // console.log(\"ðŸš€ ~ decryptMessage ~ recipientPublicKey:\", publicKey)\n      if (encoded.length !== 32) {\n        throw new Error(\"Invalid public key length\");\n      }\n    } catch (error) {\n      return `Error in public key: ${error.message}`;\n    }\n\n    const nonce = nacl.randomBytes(nacl.box.nonceLength);\n    const privateKey = naclUtil.decodeBase64(\n      localStorage.getItem(\"privateKey\")\n    );\n    // console.log(\"ðŸš€ ~ encryptMessage ~ privateKey:\", privateKey.length)\n    const encryptedMessage = nacl.box(\n      naclUtil.decodeUTF8(message),\n      nonce,\n      encoded,\n      privateKey\n    );\n\n    return {\n      nonce: naclUtil.encodeBase64(nonce),\n      encryptedMessage: naclUtil.encodeBase64(encryptedMessage),\n    };\n  };\n\n  // Decrypt function\n  // const decryptMessage = (encryptedMsg) => {\n  //     const { nonce, encryptedMessage } = encryptedMsg;\n  //     const decryptedMessage = nacl.box.open(\n  //         naclUtil.decodeBase64(encryptedMessage),\n  //         naclUtil.decodeBase64(nonce),\n  //         naclUtil.decodeBase64(recipientPublicKey),\n  //         naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n  //     );\n  //     return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n  // };\n\n  const decryptMessage = (encryptedMsg, pubkey) => {\n    // console.log(\"ðŸš€ ~ decryptMessage ~ encryptedMsg:\", encryptedMsg)\n    if (\n      !encryptedMsg ||\n      !encryptedMsg?.nonce ||\n      !encryptedMsg?.encryptedMessage\n    ) {\n      return;\n    }\n\n    const { nonce, encryptedMessage } = encryptedMsg;\n    // console.log(\"ðŸš€ ~ decryptMessage ~ pubkey:\", pubkey, nonce, encryptedMessage, localStorage.getItem('privateKey'))\n    let decodedPublicKey;\n    try {\n      decodedPublicKey = naclUtil.decodeBase64(pubkey);\n      // console.log(\"ðŸš€ ~ decryptMessage ~ decodedPublicKey:\", decodedPublicKey)\n      // console.log(\"ðŸš€ ~ decryptMessage ~ recipientPublicKey:\", pubkey)\n      if (decodedPublicKey.length !== 32) {\n        throw new Error(\"Invalid public key length\");\n      }\n    } catch (error) {\n      return `Error in public key: ${error.message}`;\n    }\n\n    try {\n      const privateKey = naclUtil.decodeBase64(\n        localStorage.getItem(\"privateKey\")\n      );\n\n      const decryptedMessage = nacl.box.open(\n        naclUtil.decodeBase64(encryptedMessage),\n        naclUtil.decodeBase64(nonce),\n        naclUtil.decodeBase64(pubkey),\n        privateKey\n      );\n      // console.log(\"ðŸš€ ~ decryptMessage ~ decryptedMessage:\", decryptedMessage)\n      return decryptedMessage\n        ? naclUtil.encodeUTF8(decryptedMessage)\n        : \"Failed to decrypt message\";\n    } catch (error) {\n      return `Decryption failed: ${error.message}`;\n    }\n  };\n  console.log(\"CHAT\", chat);\n\n  return (\n    <div style={{ padding: \"10px\" }}>\n      {/* <h2>Chat</h2> */}\n      <div\n        className=\"chat-box\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"left\",\n          gap: \"10px\",\n          padding: \"0px 10px\",\n        }}\n      >\n        <ListOfFriends\n          openingNewWIndow={openingNewWIndow}\n          setOpenedWindowForFriend={setOpenedWindowForFriend}\n        />\n        {openedWindowForFriend && userId && (\n          <ChatWindow\n            room={room}\n            socket={socket}\n            myPublicKey={myPublicKey}\n            publicKey={publicKey}\n            decryptMessage={decryptMessage}\n            chat={chat}\n            setChat={setChat}\n            sendMessage={sendMessage}\n            message={message}\n            setMessage={setMessage}\n            friendId={openedWindowForFriend}\n            userId={userId}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}