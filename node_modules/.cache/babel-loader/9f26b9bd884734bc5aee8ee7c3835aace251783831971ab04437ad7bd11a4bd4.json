{"ast":null,"code":"var _jsxFileName = \"/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useId } from 'react';\nimport io from 'socket.io-client';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport axios from 'axios';\nimport ListOfFriends from './Chat/ListOfFriends';\nimport ChatWindow from './Chat/ChatWindow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect('http://localhost:3001');\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  const [recipientPublicKey, setRecipientPublicKey] = useState('');\n  const [openedWindowForFriend, setOpenedWindowForFriend] = useState(null);\n  console.log(\"ðŸš€ ~ Chat ~ openedWindowForFriend:\", openedWindowForFriend);\n  console.log(\"ðŸš€ ~ Chat ~ recipientPublicKey:\", recipientPublicKey);\n  const userId = localStorage.getItem(\"userId\");\n  useEffect(() => {\n    socket.on('chat message', encryptedMsg => {\n      try {\n        const decryptedMsg = decryptMessage(encryptedMsg);\n        setChat([...chat, decryptedMsg]);\n      } catch (error) {\n        console.error(\"Decryption error\", error);\n      }\n    });\n  }, [chat]);\n  const sendMessage = async e => {\n    e.preventDefault();\n\n    // Fetch recipient's public key from the server\n    // Assuming you have a function to get the recipient's username or ID\n    const recipientUsername = '65a42345de580c62df9cdf31'; // Replace with actual recipient's username\n    const response = await axios.get(`http://localhost:3001/api/users/${recipientUsername}/public-key`);\n    setRecipientPublicKey(response.data.publicKey);\n    console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length);\n\n    // Encrypt the message\n    const encryptedMsg = encryptMessage(response.data.publicKey, message);\n    socket.emit('chat message', encryptedMsg);\n    setMessage('');\n  };\n\n  // Encrypt function\n  const encryptMessage = (publicKey, message) => {\n    const nonce = nacl.randomBytes(nacl.box.nonceLength);\n    const encryptedMessage = nacl.box(naclUtil.decodeUTF8(message), nonce, naclUtil.decodeBase64(publicKey), naclUtil.decodeBase64(localStorage.getItem('privateKey')));\n    return {\n      nonce: naclUtil.encodeBase64(nonce),\n      encryptedMessage: naclUtil.encodeBase64(encryptedMessage)\n    };\n  };\n\n  // Decrypt function\n  const decryptMessage = encryptedMsg => {\n    const {\n      nonce,\n      encryptedMessage\n    } = encryptedMsg;\n    const decryptedMessage = nacl.box.open(naclUtil.decodeBase64(encryptedMessage), naclUtil.decodeBase64(nonce), naclUtil.decodeBase64(recipientPublicKey), naclUtil.decodeBase64(localStorage.getItem('privateKey')));\n    return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListOfFriends, {\n        setOpenedWindowForFriend: setOpenedWindowForFriend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), openedWindowForFriend && userId && /*#__PURE__*/_jsxDEV(ChatWindow, {\n        friendId: openedWindowForFriend,\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 59\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Message\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"2xQzzEGVCfCNkMSqQBCL86E4k14=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useId","io","nacl","naclUtil","axios","ListOfFriends","ChatWindow","jsxDEV","_jsxDEV","socket","connect","Chat","_s","message","setMessage","chat","setChat","recipientPublicKey","setRecipientPublicKey","openedWindowForFriend","setOpenedWindowForFriend","console","log","userId","localStorage","getItem","on","encryptedMsg","decryptedMsg","decryptMessage","error","sendMessage","e","preventDefault","recipientUsername","response","get","data","publicKey","length","encryptMessage","emit","nonce","randomBytes","box","nonceLength","encryptedMessage","decodeUTF8","decodeBase64","encodeBase64","decryptedMessage","open","encodeUTF8","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","justifyContent","friendId","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/kanhaiyasuthar/Desktop/js/Aartas/chatapp/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useId } from 'react';\nimport io from 'socket.io-client';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport axios from 'axios';\nimport ListOfFriends from './Chat/ListOfFriends';\nimport ChatWindow from './Chat/ChatWindow';\n\nconst socket = io.connect('http://localhost:3001');\n\nfunction Chat() {\n    const [message, setMessage] = useState('');\n    const [chat, setChat] = useState([]);\n    const [recipientPublicKey, setRecipientPublicKey] = useState('');\n    const [openedWindowForFriend, setOpenedWindowForFriend] = useState(null);\n    console.log(\"ðŸš€ ~ Chat ~ openedWindowForFriend:\", openedWindowForFriend)\n\n\n    console.log(\"ðŸš€ ~ Chat ~ recipientPublicKey:\", recipientPublicKey)\n    const userId = localStorage.getItem(\"userId\") ;\n\n    useEffect(() => {\n        socket.on('chat message', (encryptedMsg) => {\n            try {\n                const decryptedMsg = decryptMessage(encryptedMsg);\n                setChat([...chat, decryptedMsg]);\n            } catch (error) {\n                console.error(\"Decryption error\", error);\n            }\n        });\n    }, [chat]);\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        // Fetch recipient's public key from the server\n        // Assuming you have a function to get the recipient's username or ID\n        const recipientUsername = '65a42345de580c62df9cdf31'; // Replace with actual recipient's username\n        const response = await axios.get(`http://localhost:3001/api/users/${recipientUsername}/public-key`);\n        setRecipientPublicKey(response.data.publicKey);\n        console.log(\"ðŸš€ ~ sendMessage ~ response:\", response.data.publicKey.length)\n\n        // Encrypt the message\n        const encryptedMsg = encryptMessage(response.data.publicKey, message);\n        socket.emit('chat message', encryptedMsg);\n        setMessage('');\n    };\n\n    // Encrypt function\n    const encryptMessage = (publicKey, message) => {\n        const nonce = nacl.randomBytes(nacl.box.nonceLength);\n        const encryptedMessage = nacl.box(\n            naclUtil.decodeUTF8(message),\n            nonce,\n            naclUtil.decodeBase64(publicKey),\n            naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n        );\n        return { nonce: naclUtil.encodeBase64(nonce), encryptedMessage: naclUtil.encodeBase64(encryptedMessage) };\n    };\n\n    // Decrypt function\n    const decryptMessage = (encryptedMsg) => {\n        const { nonce, encryptedMessage } = encryptedMsg;\n        const decryptedMessage = nacl.box.open(\n            naclUtil.decodeBase64(encryptedMessage),\n            naclUtil.decodeBase64(nonce),\n            naclUtil.decodeBase64(recipientPublicKey),\n            naclUtil.decodeBase64(localStorage.getItem('privateKey'))\n        );\n        return decryptedMessage ? naclUtil.encodeUTF8(decryptedMessage) : 'Failed to decrypt message';\n    };\n\n    return (\n        <div>\n            <h2>Chat</h2>\n            <div className=\"chat-box\" style={{display : \"flex\", justifyContent : \"space-between\"}}>\n                    <ListOfFriends setOpenedWindowForFriend={setOpenedWindowForFriend}/>\n                   { openedWindowForFriend && userId &&   <ChatWindow friendId={openedWindowForFriend} userId={userId} />}\n\n\n\n\n               \n            </div>\n            <form onSubmit={sendMessage}>\n                <input type=\"text\" placeholder=\"Message\" value={message} onChange={(e) => setMessage(e.target.value)} />\n                <button type=\"submit\">Send</button>\n            </form>\n\n\n\n        </div>\n    );\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}